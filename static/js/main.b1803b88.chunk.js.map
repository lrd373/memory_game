{"version":3,"sources":["images/amine-m'siouri.jpg","images/arthouse-studio-1.jpg","images/arthouse-studio-2.jpg","images/brady-knoll.jpg","images/gianluca-grisenti.jpg","images/jess-vide.jpg","images/luis-dalvan.jpg","images/michael-block.jpg","images/sem-steenbergen.jpg","images/zhaocan-li.jpg","images/alex-azabache.jpg","images/jeremy-bishop.jpg","Game.js","App.js","index.js"],"names":["images","getRandomId","Math","ceil","random","id","src","twilightBeach","name","sunnyMarshland","sandDunes","hotSprings","horseMeadow","mistyWoods","villageMountains","surfing","shadyPark","riverDaytime","sunriseForest","snowyMountain","ImageCard","props","imageObj","imgName","onClick","className","alt","ImageCardDeck","generateImageOrder","numImages","length","indexArray","i","newImageOrder","j","randomIndex","floor","push","splice","initialOrder","useState","setImageOrder","alreadyClicked","clearClickedImgs","incrementScore","resetScore","imageCardDeck","forEach","index","imageCard","logClicked","Board","clickedImgs","setClickedImgs","findIndex","clickedId","console","log","Game","score","setScore","bestScore","setBestScore","compareAndSetBestScore","class","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1803b88.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/amine-m'siouri.38c0e64f.jpg\";","export default __webpack_public_path__ + \"static/media/arthouse-studio-1.9d8ee122.jpg\";","export default __webpack_public_path__ + \"static/media/arthouse-studio-2.4c77ce56.jpg\";","export default __webpack_public_path__ + \"static/media/brady-knoll.d4fcab71.jpg\";","export default __webpack_public_path__ + \"static/media/gianluca-grisenti.132fe679.jpg\";","export default __webpack_public_path__ + \"static/media/jess-vide.fd393eb0.jpg\";","export default __webpack_public_path__ + \"static/media/luis-dalvan.672949da.jpg\";","export default __webpack_public_path__ + \"static/media/michael-block.12afab4d.jpg\";","export default __webpack_public_path__ + \"static/media/sem-steenbergen.1ac48049.jpg\";","export default __webpack_public_path__ + \"static/media/zhaocan-li.2eb73e67.jpg\";","export default __webpack_public_path__ + \"static/media/alex-azabache.cd3d6d5b.jpg\";","export default __webpack_public_path__ + \"static/media/jeremy-bishop.b326ccc2.jpg\";","import React, { useState } from 'react';\n\n// Importing images\nimport sandDunes from \"./images/amine-m'siouri.jpg\";\nimport hotSprings from \"./images/arthouse-studio-1.jpg\";\nimport horseMeadow from \"./images/arthouse-studio-2.jpg\";\nimport mistyWoods from \"./images/brady-knoll.jpg\";\nimport villageMountains from \"./images/gianluca-grisenti.jpg\";\nimport surfing from \"./images/jess-vide.jpg\";\nimport shadyPark from \"./images/luis-dalvan.jpg\";\nimport riverDaytime from \"./images/michael-block.jpg\";\nimport sunriseForest from \"./images/sem-steenbergen.jpg\";\nimport snowyMountain from \"./images/zhaocan-li.jpg\";\nimport twilightBeach from \"./images/alex-azabache.jpg\";\nimport sunnyMarshland from \"./images/jeremy-bishop.jpg\";\n\n\nconst images = (() => {\n    const getRandomId = () => {\n        let num = Math.ceil(Math.random() * 100);\n        return num;\n    }\n    \n    const imageArray = [\n        {\n          id: \"TwilightBeach\" + getRandomId(),\n          src: twilightBeach,\n          name: \"Twilight Beach\"\n        },\n        {\n          id: \"SunnyMarshland\" + getRandomId(),\n          src: sunnyMarshland,\n          name: \"Sunny Marshland\"\n        },\n        {\n          id: \"SandDunes\" + getRandomId(),\n          src: sandDunes,\n          name: \"Sand Dunes\"\n        },\n        {\n            id: \"HotSprings\" + getRandomId(),\n            src: hotSprings,\n            name: \"Hot Springs\"\n        }, \n        {\n            id: \"HorseMeadow\" + getRandomId(),\n            src: horseMeadow,\n            name: \"Horse Meadow\"\n        },\n        {\n          id: \"MistyWoods\" + getRandomId(),\n          src: mistyWoods,\n          name: \"Misty Woods\"\n        },\n        {\n            id: \"VillageBeneathMountains\" + getRandomId(),\n            src: villageMountains,\n            name: \"Village Beneath Mountains\"\n        },\n        {\n            id: \"Surfing\" + getRandomId(),\n            src: surfing,\n            name: \"Surfing\"\n        },\n        {\n            id: \"ShadyPark\" + getRandomId(),\n            src: shadyPark,\n            name: \"Shady Park\"\n        },\n        {\n            id: \"RiverinDaytime\" + getRandomId(),\n            src: riverDaytime,\n            name: \"River in Daytime\"\n        },\n        {\n            id: \"Sunrise in the Forest\" + getRandomId(),\n            src: sunriseForest,\n            name: \"Sunrise in the Forest\"\n        },\n        {\n            id: \"SnowyMountains\" + getRandomId(),\n            src: snowyMountain,\n            name: \"Snowy Mountains\"\n        }\n    ];\n\n    return imageArray;\n})();\n\nfunction ImageCard (props) {\n    const imageObj = props.imageObj;\n    const id = imageObj.id;\n    const src = imageObj.src;\n    const imgName = imageObj.name;\n\n    const onClick = props.onClick;\n\n    return (\n        <div className=\"imageCard\" id={id} key={id}>\n            <div className=\"imgContainer\">\n                <img \n                  className=\"imageCardImg\" \n                  alt={imgName}\n                  key={id + src} \n                  src={src} \n                  onClick={onClick}\n                />\n            </div>\n            <p className=\"imageDescription\" key={id + imgName}>{imgName}</p>\n        </div>\n    );\n}\n\nfunction ImageCardDeck (props) {\n\n    const generateImageOrder = () => {\n        const numImages = images.length;\n        const indexArray = [];\n        for (let i=0; i<numImages; i++) {\n            indexArray[i] = i;\n        }\n\n        let newImageOrder = [];\n\n        for (let j=0; j<numImages; j++) {\n            let randomIndex = Math.floor(Math.random() * indexArray.length);\n            newImageOrder.push(indexArray[randomIndex]);\n            indexArray.splice(randomIndex,1);\n        }\n\n        return (newImageOrder);\n    }\n\n    let initialOrder = generateImageOrder();\n    const [imageOrder, setImageOrder] = useState(initialOrder);\n    const alreadyClicked = props.alreadyClicked;\n    const clearClickedImgs = props.clearClickedImgs;\n    const incrementScore = props.incrementScore;\n    const resetScore = props.resetScore;\n\n    let imageCardDeck = [];\n\n    initialOrder.forEach(index => {\n        // find the corresponding image in the images array\n        let imageObj = images[index];\n\n        // generate imagecard component based on that info\n        let imageCard = \n          (<ImageCard \n            onClick={() => {\n              props.logClicked();\n              if (!alreadyClicked(imageObj.id)) {\n                incrementScore();\n              } else {\n                clearClickedImgs();\n                resetScore();\n              }\n              setImageOrder(generateImageOrder());\n            }} \n            key={imageObj.id} \n            imageObj={imageObj} \n          />);\n\n        // push that imagecard comp to the imageCards array\n        imageCardDeck.push(imageCard);\n    });\n      \n    return imageCardDeck;\n}\n\n\nfunction Board (props) {\n    const [clickedImgs, setClickedImgs] = useState([]);\n\n    const logClicked = () => {\n        console.log(clickedImgs);\n    }\n\n    const clearClickedImgs = () => {\n        setClickedImgs([]);\n    }\n\n    const alreadyClicked = (id) => {\n        if (clickedImgs.findIndex(clickedId => clickedId === id) === -1){\n            clickedImgs.push(id);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    return (\n       <div id=\"board\">\n           <ImageCardDeck \n             alreadyClicked={alreadyClicked}\n             clearClickedImgs={clearClickedImgs}\n             incrementScore={props.incrementScore}\n             resetScore={props.resetScore}\n             logClicked={logClicked}\n           />\n       </div>\n    );\n}\n\nfunction Game (props) {\n    const [score, setScore] = useState(0);\n    const [bestScore, setBestScore] = useState(0);\n\n    const incrementScore = () => {setScore(score + 1)};\n    const resetScore = () => {\n        compareAndSetBestScore();\n        setScore(0)\n    };\n\n    const compareAndSetBestScore = () => {\n        if (score > bestScore) {\n            setBestScore(score);\n        }\n    }\n\n    return (\n        <div>\n            <div id=\"header\">\n                <h1>Memory Game</h1>\n                <div class=\"score-board\">\n                    <h2>Current score: {score}</h2>\n                    <h2>Best score: {bestScore}</h2>\n                </div>\n            </div>\n            \n            <Board \n              incrementScore={incrementScore}\n              resetScore={resetScore}\n              setBestScore={setBestScore}\n            />\n        </div>\n        \n    );\n}\n\nexport default Game;","import React from 'react';\nimport Game from './Game';\n\nfunction App (props) {\n  return (\n    <Game />\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}